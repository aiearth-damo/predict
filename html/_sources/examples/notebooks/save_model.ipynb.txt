{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 模型保存"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "模型训练完成之后导出的checkpoint，可通过deploy接口将模型保存到云平台进行管理，返回一个模型引用的唯一tag，并在部署到云平台AI解译工具箱时可根据模型tag重新初始化checkpoint，自动将模型下载到本地cache目录"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 获取授权"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "在与云平台进行交互时，需要先进行云平台的授权，获取用户个人token才可使用"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiearth.core import Authenticate\n",
    "\n",
    "Authenticate()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 创建项目空间"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "项目空间和模型任务一一对应，表示一类模型任务，并通过 project_id 进行索引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiearth.predict.deploy.sdk import Project\n",
    "\n",
    "project = Project.create(\"自定义模型pipeline\")\n",
    "print(project)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 创建模型版本"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "每个项目空间下面，可以有多个模型版本，模型版本命名规则请遵循 x.y.z，xyz均为数字，如1.0.1，并通过 version_id 进行索引"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiearth.predict.deploy.sdk import Version\n",
    "\n",
    "version = project.create_version(\"1.0.1\")\n",
    "print(version)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 模型保存"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "从本地模型的onnx路径初始化ModelCheckpoint，并添加TeslaT4上转换的Tensorrt engine文件作为模型附属文件，将模型保存到云平台，并返回模型引用的`saved_model_tag`"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`ModelCheckpoint.from_local_path`的path参数为本地onnx的模型路径，image_size参数是模型输入图像的大小，bound参数是模型预测需要忽略的边界大小，不计入最后结果，attached_files参数是模型其他附属文件，这里将加速之后的trt文件作为附属文件`attached_files`进行了上传，`attached_files`参数类型为`Dict`，其中key为onnx模型文件名（去除后缀）+ 显卡类型 + trt engine后缀，在推理时`TensorrtPredictor`可根据模型文件名索引对应的trt engine，value类型为`ModelAttachedFile`，`path`参数为本地对应的trt文件路径"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiearth.predict.checkpoint import (\n",
    "    ModelCheckpoint,\n",
    "    ModelAttachedFile,\n",
    "    AcceleratorType,\n",
    ")\n",
    "\n",
    "ckpt = ModelCheckpoint.from_local_path(\n",
    "    path=\"/path/to/your/fake_name.onnx\",\n",
    "    image_size=1024,\n",
    "    bound=128,\n",
    "    attached_files={\n",
    "        \"fake_name.TeslaT4.trt\": ModelAttachedFile(\n",
    "            path=\"/path/to/your/fake_name.TeslaT4.trt\",\n",
    "            accelerator_type=AcceleratorType.t4,\n",
    "        )\n",
    "    },\n",
    ")\n",
    "\n",
    "saved_model_tag = version.save_model(ckpt)\n",
    "print(saved_model_tag)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "运行的时候需要将`/path/to/your/fake_name.onnx`替换为本地onnx模型的绝对路径，`fake_name.TeslaT4.trt`中的`fake_name`替换为上传的模型文件名，以及`ModelAttachedFile`的`path`参数替换为本地对应的trt文件绝对路径"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 模型引用"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "保存到云平台的模型，可通过模型的tag重新初始化checkpoint，自动将模型下载到本地的cache目录"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "ckpt = ModelCheckpoint.from_remote_tag(saved_model_tag)\n",
    "print(json.dumps(ckpt.get_cfg().dict()))"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 模型列表"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "保存到云平台的模型是按照项目空间和模型版本进行管理的，可以查询当前模型版本下已保存的模型信息"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "\n",
    "models = version.list_saved_models()\n",
    "print(json.dumps(models))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "python37",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "ccebe88ab91f0bb415246e570257620d1c095de960a0f0aa1c4929cc3258df9a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
