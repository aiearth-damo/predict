{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 工具箱部署"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "模型pipeline可部署到云平台工具箱模式下个人的AI解译工具，并通过云平台的工具箱模式从页面提交AI解译任务"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 本地模型推理"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "模型部署到云平台之前建议先在本地进行模型pipeline链路的调试，本地运行成功之后再部署为云平台工具箱下个人的AI解译工具"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "本地模型推理流程请参考：[本地模型推理](local_predict.ipynb)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 模型保存"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "模型pipeline部署到云平台之前需要先将模型文件保存到云平台，并将模型pipeline代码的checkpoint初始化修改为`from_remote_tag`的方式进行模型引用"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "模型保存流程请参考：[模型保存](save_model.ipynb)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 模型pipeline"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "将本地模型pipeline进行少许改动，进行云平台工具箱模式的参数适配，主要改动为：\n",
    "\n",
    "* checkpoint初始化方式：本地运行时的初始化方式为`from_local_path`，部署到云平台时需要将初始化方式修改为`from_remote_tag`，通过保存到云平台的模型tag进行引用\n",
    "\n",
    "* pipeline运行时的输入参数：本地运行时pipeline的输入参数可直接通过接口指定，部署到云平台时pipeline的输入参数需要通过`parse_input_args`进行解析得到运行时参数"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "修改之后的模型pipeline代码为："
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiearth.predict.checkpoint import ModelCheckpoint\n",
    "from aiearth.predict.predictors import TensorrtPredictor\n",
    "from aiearth.predict.processors import (\n",
    "    Chw2HwcProcessor,\n",
    "    MeanNormProcessor,\n",
    "    Hwc2ChwProcessor,\n",
    "    SqueezeNdimProcessor,\n",
    "    MaskBinarizationProcessor,\n",
    ")\n",
    "from aiearth.predict.pipelines import GeoSegmentationPredictPipeline\n",
    "from aiearth.predict.adapter.toolbox import parse_input_args, InputArgs\n",
    "\n",
    "from aiearth.predict.logging import root_logger as logger\n",
    "\n",
    "ckpt = ModelCheckpoint.from_remote_tag(saved_model_tag)\n",
    "\n",
    "pipe = GeoSegmentationPredictPipeline(\n",
    "    model_checkpoint=ckpt,\n",
    "    predictor_cls=TensorrtPredictor,\n",
    "    pre_processors=[\n",
    "        Chw2HwcProcessor([\"image\"]),\n",
    "        MeanNormProcessor(\n",
    "            [\"image\"], [123.675, 116.28, 103.53], [0.01712475, 0.017507, 0.01742919]\n",
    "        ),\n",
    "        Hwc2ChwProcessor([\"image\"]),\n",
    "    ],\n",
    "    post_processors=[\n",
    "        SqueezeNdimProcessor([\"image\"]),\n",
    "        MaskBinarizationProcessor([\"image\"], 127.5),\n",
    "    ],\n",
    ")\n",
    "\n",
    "logger.info(\"run pipeline\")\n",
    "\n",
    "input_args: InputArgs = parse_input_args()\n",
    "pipe(\n",
    "    uri=input_args.src,\n",
    "    out_dir=input_args.result_dir,\n",
    "    temp_dir=input_args.temp_dir,\n",
    "    out_filename=input_args.out_filename,\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`saved_model_tag`为[模型保存](save_model.ipynb)中返回的模型tag引用，创建`code_snippets`目录，将模型pipeline代码保存到`code_snippets`目录下面，并命名为`pipe.py`"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 工具箱部署"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "通过模型版本客户端将模型pipeline代码部署到云平台工具箱模式"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from aiearth.predict.deploy.schema import (\n",
    "    JobConfig,\n",
    "    JobOutType,\n",
    "    ToolboxRunConfig,\n",
    ")\n",
    "\n",
    "job_config = JobConfig(\n",
    "    entrypoint=\"python pipe.py\",\n",
    "    runtime_env={\"working_dir\": \"./code_snippets\"},\n",
    ")\n",
    "run_config = ToolboxRunConfig(out_type=JobOutType.VECTOR)\n",
    "\n",
    "deploy = version.deploy_as_toolbox(job_config, run_config)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`job_config`为模型pipeline的部署配置，`entrypoint`参数是任务的运行入口，这里为保存的模型pipeline代码文件，`runtime_env.working_dir`为模型pipeline代码的上层文件夹路径，部署时需要将代码文件夹进行打包上传"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`run_config`为pipeline运行时需要的配置，`JobOutType.VECTOR`表示模型pipeline运行输出的结果文件类型为shape文件"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`version`是`模型保存`时创建的模型版本对象"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 查询部署状态"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "查询模型部署的状态，部署状态类型有：\n",
    "\n",
    "* waiting：等待部署\n",
    "\n",
    "* deploying：部署中\n",
    "\n",
    "* finished： 部署完成\n",
    "\n",
    "* failed：部署失败\n",
    "\n",
    "* undeploying：等待取消部署\n",
    "\n",
    "* undeployed：部署已取消"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "deploy_status = deploy.get_deploy_status()\n",
    "print(deploy_status)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 提交解译任务"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "当模型pipeline部署完成之后，可通过云平台的工具箱模式从页面提交AI解译任务"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![toolbox](../../images/toolbox.jpeg)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "python37",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.7.13 (default, Mar 28 2022, 07:24:34) \n[Clang 12.0.0 ]"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "ccebe88ab91f0bb415246e570257620d1c095de960a0f0aa1c4929cc3258df9a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
